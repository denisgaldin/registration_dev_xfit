import requests
from dotenv import load_dotenv
import os
import random

load_dotenv()
BASE_URL = os.getenv("BASE_URL")

send_code_url = f"{BASE_URL}/authorization/sendVerificationCode"
register_url = f"{BASE_URL}/registration/basic"

headers = {
    "Content-Type": "application/json",
    "User-Agent": "okhttp/4.9.1",
    "Platform": "android",
    "App-Version": "3.12.1"
}


def generate_unique_phone():
    return {
        "countryCode": "7",
        "number": f"900{random.randint(1000000, 9999999)}"
    }


def test_successful_registration():
    phone = generate_unique_phone()

    send_payload = {"phone": phone}
    send_response = requests.post(send_code_url, headers=headers, json=send_payload)

    print(f"üì° –û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞: {send_response.status_code} - {send_response.text}")
    assert send_response.status_code == 200, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥"

    send_data = send_response.json()
    token = send_data.get("result", {}).get("token")
    assert token, "‚ùå token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ"

    verification_code = "1234"

    register_payload = {
        "token": token,
        "verificationCode": verification_code,
        "user": {
            "name": "–¢–µ—Å—Ç–æ–≤—ã–π"
        }
    }

    response = requests.post(register_url, headers=headers, json=register_payload)

    print(f"üì® –û—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é: {response.status_code} - {response.text}")
    assert response.status_code == 200, f"‚ùå –û–∂–∏–¥–∞–ª–∏ 200, –ø–æ–ª—É—á–∏–ª–∏ {response.status_code}"

    data = response.json()
    assert "result" in data, "‚ùå –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –ø–æ–ª—è result"

    user = data["result"].get("user")
    assert user is not None, "‚ùå –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"
    assert user.get("name") == "–¢–µ—Å—Ç–æ–≤—ã–π", "‚ùå –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç"

    access = data["result"].get("access")
    assert access is not None, "‚ùå –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–∫–µ–Ω–µ –¥–æ—Å—Ç—É–ø–∞"
    assert "token" in access, "‚ùå –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç access.token"
    assert "expire" in access, "‚ùå –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç access.expire"
    assert "refresh" in access, "‚ùå –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç access.refresh"


def test_registration_with_wrong_code():
    phone = generate_unique_phone()

    send_payload = {"phone": phone}
    send_response = requests.post(send_code_url, headers=headers, json=send_payload)

    print(f"üì° –û—Ç–≤–µ—Ç –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –∫–æ–¥–∞: {send_response.status_code} - {send_response.text}")
    assert send_response.status_code == 200, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥"

    send_data = send_response.json()
    token = send_data.get("result", {}).get("token")
    assert token, "‚ùå token –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –æ—Ç–≤–µ—Ç–µ"

    wrong_code = "1233"
    payload = {
        "token": token,
        "verificationCode": wrong_code,
        "user": {
            "name": "–¢–µ—Å—Ç–æ–≤—ã–π"
        }
    }

    response = requests.post(register_url, headers=headers, json=payload)

    print(f"üì® –û—Ç–≤–µ—Ç —Å –Ω–µ–≤–µ—Ä–Ω—ã–º –∫–æ–¥–æ–º: {response.status_code} - {response.text}")
    assert response.status_code == 403, f"‚ùå –û–∂–∏–¥–∞–ª–∏ 403, –ø–æ–ª—É—á–∏–ª–∏ {response.status_code}"

    data = response.json()
    error = data.get("error")
    assert error is not None, "‚ùå –í –æ—Ç–≤–µ—Ç–µ –Ω–µ—Ç –ø–æ–ª—è error"
    assert all(k in error for k in ("type", "message", "debugMessage")), "‚ùå –û—à–∏–±–∫–∞ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π"
