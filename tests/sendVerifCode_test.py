import requests
from jsonschema import validate, ValidationError
from dotenv import load_dotenv
import os
import json
import random

load_dotenv()
BASE_URL = os.getenv("BASE_URL")


def generate_unique_phone():
    return {
        "countryCode": "7",
        "number": f"900{random.randint(1000000, 9999999)}"
    }


url = f"{BASE_URL}/authorization/sendVerificationCode"

headers = {
    "Content-Type": "application/json",
    "User-Agent": "okhttp/4.9.1",
    "Platform": "android",
    "App-Version": "3.12.1"
}

schema_path = os.path.join(os.path.dirname(__file__), "../schemas/post_sendVerifCode.json")
with open(schema_path, encoding="utf-8") as f:
    response_schema = json.load(f)


def test_send_verification_code():
    payload = {"phone": generate_unique_phone()}

    response = requests.post(url, headers=headers, json=payload)

    print(f"üì° Status Code: {response.status_code}")
    print(f"üì® Response Body: {response.text}")

    assert response.status_code == 200, f"‚ùå –û–∂–∏–¥–∞–ª–∏ 200, –ø–æ–ª—É—á–∏–ª–∏ {response.status_code}"

    try:
        data = response.json()
        validate(instance=data, schema=response_schema)
        print("‚úÖ –û—Ç–≤–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç JSON-—Å—Ö–µ–º–µ")
    except ValidationError as e:
        raise AssertionError(f"‚ùå –û—Ç–≤–µ—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Å—Ö–µ–º–µ: {e.message}")
    except json.JSONDecodeError:
        raise AssertionError("‚ùå –û—Ç–≤–µ—Ç –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–∞–ª–∏–¥–Ω—ã–º JSON")
